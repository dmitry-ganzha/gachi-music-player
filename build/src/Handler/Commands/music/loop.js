"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command_Loop = void 0;
const Command_1 = require("@Structures/Handle/Command");
const discord_js_1 = require("discord.js");
class Command_Loop extends Command_1.Command {
    constructor() {
        super({
            name: "loop",
            aliases: ["repeat", "rept"],
            description: "–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –º—É–∑—ã–∫–∏!",
            usage: "song | –î–æ—Å—Ç—É–ø–Ω—ã: song, songs, off",
            options: [
                {
                    name: "type",
                    description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ | song, on, off",
                    type: discord_js_1.ApplicationCommandOptionType.String
                }
            ],
            isSlash: true,
            isEnable: true
        });
    }
    ;
    run = (message, args) => {
        const { author, member, guild } = message;
        const queue = message.client.queue.get(guild.id);
        if (!member?.voice?.channel || !member?.voice)
            return { text: `${author}, –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`, color: "DarkRed" };
        if (queue && queue.voice && member?.voice?.channel?.id !== queue.voice.id)
            return {
                text: `${author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`, color: "DarkRed"
            };
        if (queue.options.radioMode)
            return { text: `${author}, –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–¥–∏–æ!`, color: "DarkRed" };
        if (!queue)
            return { text: `${author}, ‚ö† | –ú—É–∑—ã–∫–∞ —â–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`, color: "DarkRed" };
        switch (args[0]) {
            case "–≤—ã–∫–ª":
            case "off":
                queue.options.loop = "off";
                return { text: `‚ùå | –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω`, codeBlock: "css" };
            case "–≤–∫–ª":
            case "on":
                queue.options.loop = "songs";
                return { text: `üîÅ | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –º—É–∑—ã–∫–∏`, codeBlock: "css" };
            case "one":
            case "1":
            case "song":
                queue.options.loop = "song";
                return { text: `üîÇ | –ü–æ–≤—Ç–æ—Ä  | ${queue.songs[0].title}`, codeBlock: "css", color: queue.songs[0].color };
            default:
                queue.options.loop = queue.options.loop !== "songs" ? "songs" : "off";
                return { text: `üé∂ | –ü–æ–≤—Ç–æ—Ä ${queue.options.loop}`, codeBlock: "css" };
        }
    };
}
exports.Command_Loop = Command_Loop;
